pipeline {
    agent{
        label "jenkins-agent"
    }

    environment {
        DOCKER_BUILDKIT = 1
        SONARQUBE_HOST = 'https://sonar.jenkinsmnickerson.com' //  SonarQube server URL
        SONARQUBE_PROJECT_KEY = 'react-go-webapp' // project key
        PATH = "/opt/sonar-scanner/bin:$PATH"
        APP_NAME = "react-go-webapp"
        RELEASE = "1.0.0"

        DOCKER_USER = "maxnickerson"
        DOCKER_PASS = 'dockerhub' // secret file
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"

        IMAGE_NAME_FRONTEND = "${DOCKER_USER}/${APP_NAME}-frontend"
        IMAGE_NAME_BACKEND = "${DOCKER_USER}/${APP_NAME}-backend"
        JENKINS_API_TOKEN = credentials('JENKINS_API_TOKEN')

    }

    stages {

        stage('Cleanup Workspace and Containers') {
            steps {
                cleanWs()
                script {
                    try {
                        sh 'docker-compose down'
                    } catch (Exception e) {
                        echo 'No containers to stop'
                    }
                }
                sh 'docker system prune -f --volumes'
            }
        }



        stage('Checkout from SCM') {
            steps {
                git branch: 'master', credentialsId: 'github', url: 'https://github.com/MaxNickerson/react-go-webapp'
            }
        }

        stage('Build Frontend and Backend') {
            steps {
                sh 'docker-compose build'
                
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-sonarqube', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv('sonarqube-server') {
                        script {
                            echo "SonarQube Server URL: ${SONAR_HOST_URL}"
                            echo "SonarQube Token: ${SONARQUBE_TOKEN}" // This will be masked in logs
                            echo "Running SonarQube Scanner..."
                            sh '''
                                sonar-scanner \
                                -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONARQUBE_TOKEN
                            '''
                        }
                    }
                }
            }
        }


        
        stage('Quality Gate') {
           steps {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube' 
                    
                }
           }
        


        stage('Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_PASS) {
                        sh 'docker-compose build frontend'
                        sh "docker tag ${APP_NAME}-frontend:latest ${IMAGE_NAME_FRONTEND}:${IMAGE_TAG}"
                        sh "docker push ${IMAGE_NAME_FRONTEND}:${IMAGE_TAG}"

                        // Build and tag backend image
                        sh 'docker-compose build backend'
                        sh "docker tag ${APP_NAME}-backend:latest ${IMAGE_NAME_BACKEND}:${IMAGE_TAG}"
                        sh "docker push ${IMAGE_NAME_BACKEND}:${IMAGE_TAG}"

                    }
                }
            }
        }

        stage('Trigger CD Pipeline') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-api-token', variable: 'JENKINS_API_TOKEN')]) {
                    script {
                        sh """
                            echo "Triggering CD Pipeline with IMAGE_TAG=${IMAGE_TAG}"
                            echo "Using Jenkins API Token"

                            curl -v -k --user admin:${JENKINS_API_TOKEN} \
                            -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' \
                            --data-urlencode 'IMAGE_TAG=${IMAGE_TAG}' \
                            'https://jenkinsmnickerson.com/job/argocd-kubernetes-manifests/buildWithParameters?token=gitops-token'
                        """               
                    }
                }
            }
        }


    }
    


    post {
        always {
            cleanWs()
        }

    }

}