pipeline {
    agent{
        label "jenkins-agent"
    }

    environment {
        DOCKER_BUILDKIT = 1
        SONARQUBE_HOST = 'https://sonar.jenkinsmnickerson.com' // Update with your SonarQube server URL
        SONARQUBE_PROJECT_KEY = 'react-go-webapp' // Update with your project key
        PATH = "/opt/sonar-scanner/bin:$PATH"
    }

    stages {

        stage('Cleanup Workspace and Containers') {
            steps {
                cleanWs()
                script {
                    try {
                        sh 'docker-compose down'
                    } catch (Exception e) {
                        echo 'No containers to stop'
                    }
                }
                sh 'docker system prune -f --volumes'
            }
        }



        stage('Checkout from SCM') {
            steps {
                git branch: 'master', credentialsId: 'github', url: 'https://github.com/MaxNickerson/react-go-webapp'
            }
        }

        stage('Build Frontend and Backend') {
            steps {
                sh 'docker-compose build'
                
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-sonarqube', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv('sonarqube-server') {
                        script {
                            echo "SonarQube Server URL: ${SONAR_HOST_URL}"
                            echo "SonarQube Token: ${SONARQUBE_TOKEN}" // This will be masked in logs
                            echo "Running SonarQube Scanner..."
                            sh '''
                                sonar-scanner \
                                -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONARQUBE_TOKEN
                            '''
                        }
                    }
                }
            }
        }


        
        stage('Quality Gate') {
           steps {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube' 
                    
                }
           }
        }



        

    

    post {
        always {
            cleanWs()
        }

    }

}